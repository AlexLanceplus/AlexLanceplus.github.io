<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex</title>
  
  <subtitle>喵~</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-24T14:13:30.064Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>AlexLanceplus</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/06/24/Git/"/>
    <id>http://example.com/2023/06/24/Git/</id>
    <published>2023-06-24T13:01:28.731Z</published>
    <updated>2023-06-24T14:13:30.064Z</updated>
    
    <content type="html"><![CDATA[<hr /><h2 id="titlegit的常用命令"><a class="markdownIt-Anchor" href="#titlegit的常用命令"></a> title:Git的常用命令</h2><h1 id="git的常用命令"><a class="markdownIt-Anchor" href="#git的常用命令"></a> Git的常用命令</h1><h2 id="新建仓库"><a class="markdownIt-Anchor" href="#新建仓库"></a> 新建仓库</h2><p><img src="../img/%E7%A4%BA%E4%BE%8B1.jpg" alt="示例1" /></p><p>新建好了一个仓库，可以看到只有一个readme文件，下面就以此来演示操作</p><h2 id="git常用的代码拉取-修改-提交-推送命令"><a class="markdownIt-Anchor" href="#git常用的代码拉取-修改-提交-推送命令"></a> git常用的代码拉取-修改-提交-推送命令</h2><p>现在我们来演示一下git上的常用的代码<strong>拉取-修改-提交-推送</strong>操作</p><h3 id="拉取"><a class="markdownIt-Anchor" href="#拉取"></a> 拉取</h3><p>拉取操作的实现主要是通过<strong>git  clone</strong>来实现的，通过仓库提供的SSH链接将仓库拉取到本地，通过<strong>git  bash</strong>：</p><p><img src="..%5Cimg%5Cimage-20230624155527087.png" alt="image-20230624155527087" /></p><p>执行完会发现，当前位置会出现一个与仓库名同名的文件</p><p><img src="..%5Cimg%5Cimage-20230624160606570.png" alt="image-20230624160606570" /></p><h3 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h3><p>假如我们拉取仓库后发现并不符合我们预期，我们希望可以更改仓库，并将项目重新上传到github上，那么我们需要三步，现在是第一步</p><p>——修改，首先我们要在仓库中添加helloworld.c和helloworld.h文件：</p><p><img src="..%5Cimg%5Cimage-20230624161531284.png" alt="image-20230624161531284" /></p><p>然后执行<strong>git  add</strong>命令，将增加的文件添加到本地暂存区，git add命令将本地文件或者代码添加到本地暂存区，这之前建议先通过</p><p><strong>git  status</strong>来查看工作区状态：</p><p><img src="..%5Cimg%5C%E7%A4%BA%E4%BE%8B3.jpg" alt="示例3" /></p><h3 id="提交"><a class="markdownIt-Anchor" href="#提交"></a> 提交</h3><p>紧接着上一步git add，将文件和代码添加到本地暂存区后，需要再从本地暂存区提交到本地master上（这正是分布式的巧妙，每个机器都可以拥有自己的代码仓库，在拉取远程仓库的时候，电脑就自动创建了本地的分支master，通过<strong>git   commit</strong>将修改好的仓库提交到</p><p>本地master上：</p><p><img src="Git.assets/image-20230624161531284.png" alt="image-20230624161531284" /></p><p><strong>-m表示备注信息</strong></p><h3 id="推送"><a class="markdownIt-Anchor" href="#推送"></a> 推送</h3><p>仅仅修改本地仓库是不够的，因为本地仓库其他合作者是看不见的，所以我们需要将本地仓库推送到远程仓库托管系统（GitHub），</p><p>这一步是通过<strong>git  push</strong>命令来实现的：</p><p><img src="Git.assets/%E7%A4%BA%E4%BE%8B5.jpg" alt="示例5" /></p><h3 id="完成"><a class="markdownIt-Anchor" href="#完成"></a> 完成</h3><p><img src="Git.assets/image-20230624170622816.png" alt="image-20230624170622816" /></p><h3 id="查看修改日志"><a class="markdownIt-Anchor" href="#查看修改日志"></a> 查看修改日志</h3><p><img src="Git.assets/image-20230624170757686.png" alt="image-20230624170757686" /></p><h3 id="git-clone和git-pull的区别"><a class="markdownIt-Anchor" href="#git-clone和git-pull的区别"></a> git  clone和git  pull的区别</h3><p>**git  clone：**从无到有，从远程克隆一整个仓库到本地，包括代码更新与日志等</p><p>**git  pull：**仅将远程仓库更新的部分合并到本地，一般用于更新本地仓库时使用</p><p><img src="Git.assets/image-20230624173611236.png" alt="image-20230624173611236" /></p><h2 id="git各阶段代码修改回退撤销操作"><a class="markdownIt-Anchor" href="#git各阶段代码修改回退撤销操作"></a> git各阶段代码修改回退撤销操作</h2><h3 id="git-add之前撤回对工作区的修改"><a class="markdownIt-Anchor" href="#git-add之前撤回对工作区的修改"></a> git  add之前撤回对工作区的修改</h3><p><img src="Git.assets/image-20230624194119864.png" alt="image-20230624194119864" /></p><h3 id="git-add之后撤回对暂存区的修改"><a class="markdownIt-Anchor" href="#git-add之后撤回对暂存区的修改"></a> git  add之后撤回对暂存区的修改</h3><p><img src="Git.assets/image-20230624194913043.png" alt="image-20230624194913043" /></p><h3 id="git-commit之后撤回提交的修改"><a class="markdownIt-Anchor" href="#git-commit之后撤回提交的修改"></a> git  commit之后撤回提交的修改</h3><p><img src="Git.assets/image-20230624200651783.png" alt="image-20230624200651783" /></p><h3 id="撤回对远程仓库的修改"><a class="markdownIt-Anchor" href="#撤回对远程仓库的修改"></a> 撤回对远程仓库的修改</h3><p>通过git   pull将最新的代码拉取下来后，删除修改，再重新push上去</p><h2 id="本地分支管理"><a class="markdownIt-Anchor" href="#本地分支管理"></a> 本地分支管理</h2><p>假设我们想要修改代码，但是我们需要修改很多次，这时我们就可以创建一个新的分支，将代码修改好再合并分支即可</p><p><img src="Git.assets/image-20230624204324627.png" alt="image-20230624204324627" /></p><p><img src="Git.assets/image-20230624204357562.png" alt="image-20230624204357562" /></p><p><strong>注意，如果两条分支同时对一个文件进行修改就会引起合并冲突，这时可以通过git   diff来查看冲突，然后直接手动修改</strong></p><h2 id="远程分支管理"><a class="markdownIt-Anchor" href="#远程分支管理"></a> 远程分支管理</h2><p>在远程仓库中新开一条分支，用来存储新的项目</p><p><img src="Git.assets/image-20230624205530762.png" alt="image-20230624205530762" /></p><p>然后通过git  pull到本地进行修改，不过要注意每个本地分支追踪的远程分支不同</p><p><img src="Git.assets/image-20230624205821100.png" alt="image-20230624205821100" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr /&gt;
&lt;h2 id=&quot;titlegit的常用命令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#titlegit的常用命令&quot;&gt;&lt;/a&gt; title:Git的常用命令&lt;/h2&gt;
&lt;h1 id=&quot;git的常用命令&quot;&gt;&lt;a class=&quot;markdo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/06/23/hello-world/"/>
    <id>http://example.com/2023/06/23/hello-world/</id>
    <published>2023-06-23T05:55:37.581Z</published>
    <updated>2023-06-24T07:22:29.198Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex</title>
  
  <subtitle>喵~</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-22T12:01:16.938Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>AlexLanceplus</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言进阶学习第一天</title>
    <link href="http://example.com/2023/07/19/C%20%20study%20%20%20first%20%20%20%20day/"/>
    <id>http://example.com/2023/07/19/C%20%20study%20%20%20first%20%20%20%20day/</id>
    <published>2023-07-19T00:35:46.260Z</published>
    <updated>2023-07-22T12:01:16.938Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机内存模型"><a class="markdownIt-Anchor" href="#计算机内存模型"></a> 计算机内存模型</h3><p>32/64位机表示其相应指令集的指令长度，表示其cpu位宽，以及数据总线的宽度，计算机的寻址能力与地址总线位宽有关，一般来说，32位机拥有32根地址总线，但是这并不意味着32位机的寻址能力就一定是32位的，他有可能是36位，64位同理，目前并没有64位寻址能力的计算机，但是寻址范围是由32位与64位决定的，32位电脑的寻址范围为4G，而64位电脑的寻址范围则是2的32次方字节，以32位机为例，计算机的内存模型分为两部分，一部分为1G的内核态，一部分为3G的用户态，其中用户态分为栈、共享内存映射区、堆、bss段（未初始化或初始化为零的全局变量）、data段（初始化不为零的全局变量和静态变量）、text段（代码段和rodata段）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.bilibili.com/read/cv19325810</span></span><br></pre></td></tr></table></figure><h3 id="计算机编码"><a class="markdownIt-Anchor" href="#计算机编码"></a> 计算机编码</h3><p>计算机为能够简化计算以及处理正负零问题，借助模的思想，创建了补码，通过补码进行运算，补码的运算规则主要有取反操作时，符号位也要参与运算，符号位为1表示负，正负转化的方法是取反后加一，例如128的二进制为1000  0000，则-128的反码为01111  1111，因此128的补码-128为1000 0000</p><h3 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h3><p>数据类型的本质是对内存的格式化，通过定义数据类型来确定内存区域的访问方式与规则，比如int   a，就规定了内存区域的访问方式是a，访问规则是int类型，再比如一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span>* p = <span class="built_in">malloc</span>(<span class="number">8</span>);  <span class="comment">//开辟内存区</span></span><br><span class="line"><span class="type">char</span>* cp =(<span class="type">char</span>*)p;   <span class="comment">//字符类型</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cp[i] = <span class="string">&#x27;a&#x27;</span> + i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c  &quot;</span>, cp[j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="type">int</span>* sp = (<span class="type">int</span>*)p;  <span class="comment">//整数类型</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; <span class="number">2</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line">cp[n] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">0</span>; m &lt; <span class="number">2</span>; m++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, cp[m]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h3><p>类型转换分为强制类型转换和隐式类型转换，类型转换的意义在于将小数据赋值给大数据，可以防止精度丢失，强制转换也叫做显性转换，比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span>)(x+y)</span><br><span class="line">(<span class="type">float</span>)x</span><br></pre></td></tr></table></figure><p>隐式类型转换</p><p>隐式类型转换的情况分为两种，一种是大数据赋值给小数据，二进制尾部对齐，截断，可能会丢失数据，另一种是小数据赋值给大数据，</p><p>也是隐式转换的通常情况，转换规则为short和char转换为int，int转换为unsigned   int，unsigned  int转换为long，long和float会转换为</p><p>double类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">float</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="type">int</span> s1, r = <span class="number">5</span>;</span><br><span class="line">    <span class="type">double</span> s2;</span><br><span class="line">    s1 = r * r * PI;</span><br><span class="line">    s2 = r * r * PI;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1=%d, s2=%f\n&quot;</span>, s1, s2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码结果中，r变量在计算的过程中会提升为double类型而s1是大数据赋值给小数据，会发生截断，而s2则没事</p><p>整型提升</p><p>整型提升是隐式类型转换的一种情况，当char和short进行运算时，会转换为int类型进行运算，因为在cpu上int的执行效率是最高的</p><h3 id="习题"><a class="markdownIt-Anchor" href="#习题"></a> 习题</h3><p>1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">-20</span>;</span><br><span class="line">    (a+b&gt;<span class="number">6</span>) ? <span class="built_in">puts</span>(<span class="string">&quot;&gt;6&quot;</span>):<span class="built_in">puts</span>(<span class="string">&quot;&lt;=6&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类型转换的方向是小数据向大数据转换，所以int类型会向unsigned  int类型转换，因此a+b在有符号位时的二进制表示为1111 0100，其中1表示表示符号位，但是当转换为unsigned类型时，符号位将参与实际运算，从而大于6</span></span><br></pre></td></tr></table></figure><p>2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="number">-1</span> -i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进程空间"><a class="markdownIt-Anchor" href="#进程空间"></a> 进程空间</h3><p><strong>程序</strong>：是经源码编译后的可编译文件，可执行文件可以多次被执行，程序存储在硬盘上，所以是静态概念，程序只有初始不为零的数据(initial   data)和代码段（rodata和text）</p><p><strong>进程</strong>：是程序加载到内存后开始执行、至执行结束，这样的一段时间概念，是动态概念，进程随程序使用而开始，随程序结束而结束,进程有五个区，接下来着重讲一下</p><p>程序到进程时，程序占据硬盘空间，而进程则使用虚拟内存，再由虚拟内存映射到真实内存，这一过程由操作系统实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//blog.csdn.net/Stars____/article/details/124312775</span></span><br></pre></td></tr></table></figure><p><strong>数据在进程空间的存储</strong>：</p><p>进程空间（虚拟内存）分为五个部分，自上而下分为：命令行相关（参数，环境变量）、栈（auto修饰的局部变量）、共享内存映射区（动态库加载）、堆、bss段（初始化为零或未初始化的全局变量）、data段（初始化不为零的全局变量）、text段（代码和常量）</p><h3 id="函数的出栈压栈"><a class="markdownIt-Anchor" href="#函数的出栈压栈"></a> 函数的出栈/压栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.cnblogs.com/alexlance/p/17432758.html</span></span><br></pre></td></tr></table></figure><h3 id="习题-2"><a class="markdownIt-Anchor" href="#习题-2"></a> 习题</h3><p>1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>*<span class="title function_">fa</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *pa = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="comment">// pa 指针在栈区，&quot;123456”在常量区，该函数调用完后指针变量 pa 就被释放了</span></span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//指针变量 p 在栈中分配 4 字节</span></span><br><span class="line">    p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//本函数在这里开辟了一块堆区的内存空间，并把地址赋值给 p</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p, <span class="string">&quot;wudunxiong 1234566&quot;</span>);</span><br><span class="line">    <span class="comment">//把常量区的字符串拷贝到堆区</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">    <span class="comment">//返回给主调函数 fb()，相对 fa 来说 fb 是主调函数，相对 main 来说，</span></span><br><span class="line">    <span class="comment">//fa(),fb()都是被调用函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>*<span class="title function_">fb</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">char</span> *pstr = <span class="literal">NULL</span>;</span><br><span class="line">    pstr = fa();</span><br><span class="line">    <span class="keyword">return</span> pstr;<span class="comment">//指针变量 pstr 在这就结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    str = fb();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str = %s\n&quot;</span>,str);</span><br><span class="line">    <span class="built_in">free</span>(str);</span><br><span class="line">    <span class="comment">//防止内存泄露，被调函数 fa()分配的内存存的值通过返回值传给主调函数，</span></span><br><span class="line">    <span class="comment">// 然后主调函数释放内存</span></span><br><span class="line">    str = <span class="literal">NULL</span>;<span class="comment">//防止产生野指针</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reversearr</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> i,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i != len - <span class="number">1</span>)</span><br><span class="line">reversearr(arr, i + <span class="number">1</span>, len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d   &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[ ] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">reversearr(arr, <span class="number">0</span>, sz);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组"><a class="markdownIt-Anchor" href="#一维数组"></a> 一维数组</h3><p><strong>本质</strong>：数组是用于存储相同数据类型数据，且在内存空间连续的一种数据结构类型</p><p><strong>三要素</strong>：步长（由数组的基本数据类型决定）、范围、起始地址（数组名）</p><p><strong>类型</strong>：type [N]</p><p><strong>定义</strong>：type name[N]</p><p><strong>大小</strong>：sizeof(type [N]) 或 sizeof(name)</p><p><strong>访问方式</strong>：一种是数组整体访问，比如对数组求大小，sizeof(数组名)或者sizeof(type[N])，或者是对数组整体取地址，来获取数组指针，</p><p>比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr = %p\n&quot;</span>,&amp;arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr+1 = %p\n&quot;</span>,&amp;arr+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span>(*pa)[<span class="number">10</span>] = &amp;arr;   <span class="comment">//数组指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pa = %p\n&quot;</span>,pa); <span class="comment">//pa=&amp;arr</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pa+1 = %p\n&quot;</span>,pa+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种访问方式则是数组名访问数组成员,其本质是指针的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name[i] == *(name+i) == i[name]</span><br></pre></td></tr></table></figure><p>函数返回值（一级指针）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">allocMem</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(n);<span class="comment">//返回起始位置，堆区</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//char arr[100]=&quot;hello world&quot;;</span></span><br><span class="line">    <span class="comment">//return arr;</span></span><br><span class="line">    <span class="comment">//错误写法，栈上的空间是不可以返回的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数返回（二级指针）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//如果只用一级指针，函数随用随销，返回后p还会指向随机一段地址空间，仅在函数内有效，只有通过传入指针地址才能有效修改</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">allocMem</span><span class="params">(<span class="type">char</span> **p,<span class="type">int</span> n)</span> </span><br><span class="line">&#123;</span><br><span class="line">    *p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(n);</span><br><span class="line">    <span class="keyword">return</span> *p== <span class="literal">NULL</span>?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">    <span class="keyword">if</span>(allocMem(&amp;p,<span class="number">100</span>)&lt;<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(p,<span class="string">&quot;china&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a class="markdownIt-Anchor" href="#二维数组"></a> 二维数组</h3><p><strong>本质</strong>：二维数组的本质是一维数组，只不过，一维数组的成员又是一个一维数组而己</p><p>定义：<strong>type[N]   name[M]</strong></p><p>三要素：与一维数组相同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a+i           a[i]         表示第i行的起始地址，是数组指针</span><br><span class="line">*(a+i)，      a[i]         &amp;a[i][<span class="number">0</span>]表示第 i 行第 <span class="number">0</span> 个元素地址，是一级指针</span><br><span class="line">*(a+i)+j，    a[i]+j       &amp;a[i][j]表示第 i 行第 j 个元素地址</span><br><span class="line">*(*(a+i)+j)   *(a[i]+j)    a[i][j]表示第 i 行第 j 个</span><br></pre></td></tr></table></figure><p><strong>线性存储</strong>：二维数组在逻辑上是二维的，但是在存储上却是一维的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">array</span>[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做参数传递</p><p>二维数组本质是常量数组指针，所以跟其对应的形参也应该是数组指针类型的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">displayArray</span><span class="params">(<span class="type">int</span>(*p)[<span class="number">4</span>],<span class="type">int</span> n)</span><span class="comment">//数组指针 </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(*(p+i)+j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    displayArray(<span class="built_in">array</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="习题-3"><a class="markdownIt-Anchor" href="#习题-3"></a> 习题</h3><p>现在数组 int a[3] = {1,3,5}; int b[5] = {2,4,6,8,10}; 合并到 int c[8]中去，使其依然 有序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;; <span class="type">int</span> b[<span class="number">5</span>] = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> c[<span class="number">8</span>];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">3</span>&amp;&amp;j&lt;<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; b[j])</span><br><span class="line">            c[k++] = a[i++];</span><br><span class="line">        <span class="keyword">else</span> (a[i] &gt; b[j])</span><br><span class="line">            c[k++] = b[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断最后一位的数据</span></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;<span class="number">5</span>)</span><br><span class="line">        c[k++] = b[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">3</span>)</span><br><span class="line">        c[k++] = a[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求次最值</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">secondMaxOfArray</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> max, subm;</span><br><span class="line">    max = subm = *p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i] &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            subm = max;</span><br><span class="line">            max = p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i] &lt; max &amp;&amp; p[i]&gt;subm ||max == subm)<span class="comment">//防止连续相同的数字</span></span><br><span class="line">            &#123;</span><br><span class="line">                subm = p[i];</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> subm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">10</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> subm = secondMaxOfArray(arr,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;subm = %d\n&quot;</span>,subm);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;计算机内存模型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机内存模型&quot;&gt;&lt;/a&gt; 计算机内存模型&lt;/h3&gt;
&lt;p&gt;32/64位机表示其相应指令集的指令长度，表示其cpu位宽，以及数据总线的宽度，计算机的寻址能力与地址总线位宽有关</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C-stack</title>
    <link href="http://example.com/2023/07/08/C-stack/"/>
    <id>http://example.com/2023/07/08/C-stack/</id>
    <published>2023-07-08T03:47:04.699Z</published>
    <updated>2023-07-09T02:43:34.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈的基本概念"><a class="markdownIt-Anchor" href="#栈的基本概念"></a> 栈的基本概念</h2><p>栈是一种只允许在一端进行插入或删除操作的线性表，栈是一种线性表，但限定这种线性表只能在某一段进行插入和删除操作</p><p>栈顶（Top）：线性表允许进行插入和删除的一端。</p><p>栈底（Bottom）：固定的，不允许进行插入和删除的另一端。</p><p>空栈：不含任何元素</p><h2 id="栈的两种实现方式"><a class="markdownIt-Anchor" href="#栈的两种实现方式"></a> 栈的两种实现方式</h2><h3 id="顺序栈"><a class="markdownIt-Anchor" href="#顺序栈"></a> 顺序栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span> &#123;</span>      <span class="comment">//定义结构体</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">char</span>* space;</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;<span class="built_in">stack</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">initstack</span><span class="params">(<span class="built_in">stack</span>* s,<span class="type">int</span> size)</span><span class="comment">//初始化栈</span></span><br><span class="line">&#123;</span><br><span class="line">s-&gt;top = <span class="number">0</span>;</span><br><span class="line">s-&gt;len = size;</span><br><span class="line">s-&gt;space = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * s-&gt;len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">stack</span>* s)</span><span class="comment">//判断是否为空栈</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> s-&gt;top == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(<span class="built_in">stack</span>* s)</span><span class="comment">//判断栈是否已满</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> s-&gt;top == s-&gt;len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushstack</span><span class="params">(<span class="built_in">stack</span>* s,<span class="type">char</span> a)</span><span class="comment">//压栈</span></span><br><span class="line">&#123;</span><br><span class="line">s-&gt;space[s-&gt;top++] = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">popstack</span><span class="params">(<span class="built_in">stack</span>* s)</span><span class="comment">//出栈</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> b=s-&gt;space[--s-&gt;top];</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">resetstack</span><span class="params">(<span class="built_in">stack</span>* s)</span><span class="comment">//栈的重置</span></span><br><span class="line">&#123;</span><br><span class="line">s-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroystack</span><span class="params">(<span class="built_in">stack</span>* s)</span><span class="comment">//栈的销毁</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(s-&gt;space);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span> s;</span><br><span class="line">initstack(&amp;s,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> a = <span class="string">&#x27;A&#x27;</span>; a &lt; <span class="string">&#x27;Z&#x27;</span>; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!isfull(&amp;s))</span><br><span class="line">pushstack(&amp;s, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!isempty(&amp;s))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c  &quot;</span>, popstack(&amp;s));<span class="comment">//满足先进后出，逆序打印</span></span><br><span class="line">destroystack(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式栈"><a class="markdownIt-Anchor" href="#链式栈"></a> 链式栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span> &#123;</span></span><br><span class="line">node* top;</span><br><span class="line">&#125;<span class="built_in">stack</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">clearStack</span><span class="params">(Stack * ps)</span>  <span class="comment">//销毁栈</span></span><br><span class="line">&#123;</span><br><span class="line">    SNode * t;</span><br><span class="line">    <span class="keyword">while</span>(ps-&gt;top)</span><br><span class="line">    &#123;</span><br><span class="line">        t = ps-&gt;top;</span><br><span class="line">        ps-&gt;top = ps-&gt;top-&gt;_next;</span><br><span class="line">        <span class="built_in">free</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">initstack</span><span class="params">(<span class="built_in">stack</span>* s)</span> <span class="comment">//初始化栈</span></span><br><span class="line">&#123;</span><br><span class="line">s-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">stack</span>* s)</span>  <span class="comment">//判满</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> s-&gt;top == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushstack</span><span class="params">(<span class="built_in">stack</span>* s, <span class="type">char</span> a)</span> <span class="comment">//压栈</span></span><br><span class="line">&#123;</span><br><span class="line">node* t = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (t == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">t-&gt;ch = a;</span><br><span class="line">t-&gt;next = s-&gt;top;</span><br><span class="line">s-&gt;top = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">popstack</span><span class="params">(<span class="built_in">stack</span>* s)</span> <span class="comment">//出栈</span></span><br><span class="line">&#123;</span><br><span class="line">node* t = s-&gt;top;</span><br><span class="line">s-&gt;top = s-&gt;top-&gt;next;</span><br><span class="line"><span class="type">char</span> o = t-&gt;ch;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span> s;</span><br><span class="line">initstack(&amp;s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> a = <span class="string">&#x27;A&#x27;</span>; a &lt; <span class="string">&#x27;Z&#x27;</span>; a++)</span><br><span class="line">pushstack(&amp;s,a);</span><br><span class="line"><span class="keyword">while</span> (!isempty(&amp;s))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c  &quot;</span>, popstack(&amp;s));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的应用"><a class="markdownIt-Anchor" href="#栈的应用"></a> 栈的应用</h2><h3 id="栈实现深度搜索不打印路径版"><a class="markdownIt-Anchor" href="#栈实现深度搜索不打印路径版"></a> 栈实现深度搜索（不打印路径版）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXROW 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLINE 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//1 代表墙，2 走过的路，0 代表路</span></span><br><span class="line"><span class="type">int</span> maze[MAXROW][MAXLINE] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">displyMaze</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MAXLINE; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (maze[i][j] == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%2s&quot;</span>, <span class="string">&quot; *&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (maze[i][j] == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%2s&quot;</span>, <span class="string">&quot; #&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%2s&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; ====================\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;point;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">point xis;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span> &#123;</span></span><br><span class="line">node* top;</span><br><span class="line">&#125;<span class="built_in">stack</span>;</span><br><span class="line"><span class="built_in">stack</span> s;</span><br><span class="line"><span class="type">void</span> <span class="title function_">initstack</span><span class="params">(<span class="built_in">stack</span>* s)</span></span><br><span class="line">&#123;</span><br><span class="line">s-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">stack</span>* s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>  s-&gt;top == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushstack</span><span class="params">(<span class="built_in">stack</span>* s, point a)</span></span><br><span class="line">&#123;</span><br><span class="line">node* t = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (t == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">t-&gt;xis = a;</span><br><span class="line">t-&gt;next = s-&gt;top;</span><br><span class="line">s-&gt;top = t;</span><br><span class="line">&#125;</span><br><span class="line">point <span class="title function_">popstack</span><span class="params">(<span class="built_in">stack</span>* s)</span></span><br><span class="line">&#123;</span><br><span class="line">node* t = s-&gt;top;</span><br><span class="line">s-&gt;top = s-&gt;top-&gt;next;</span><br><span class="line">point o = t-&gt;xis;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">visit</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,point p)</span></span><br><span class="line">&#123;</span><br><span class="line">point q = &#123; x,y &#125;;</span><br><span class="line">pushstack(&amp;s, q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">point sp = &#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">point ep = &#123;<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">initstack(&amp;s);</span><br><span class="line">pushstack(&amp;s, sp);</span><br><span class="line">maze[sp.x][sp.y] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (!isempty(&amp;s))</span><br><span class="line">&#123;</span><br><span class="line">point t = popstack(&amp;s);</span><br><span class="line">maze[t.x][t.y] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (t.x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; maze[t.x - <span class="number">1</span>][t.y] != <span class="number">1</span> &amp;&amp; maze[t.x - <span class="number">1</span>][t.y] != <span class="number">2</span>)</span><br><span class="line">visit(t.x<span class="number">-1</span>, t.y,t);</span><br><span class="line"><span class="keyword">if</span> (t.x + <span class="number">1</span> &lt;=<span class="number">9</span> &amp;&amp; maze[t.x + <span class="number">1</span>][t.y] != <span class="number">1</span> &amp;&amp; maze[t.x + <span class="number">1</span>][t.y] != <span class="number">2</span>)</span><br><span class="line">visit(t.x + <span class="number">1</span>, t.y, t);</span><br><span class="line"><span class="keyword">if</span> (t.y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; maze[t.x][t.y<span class="number">-1</span>] != <span class="number">1</span> &amp;&amp; maze[t.x][t.y<span class="number">-1</span>] != <span class="number">2</span>)</span><br><span class="line">visit(t.x, t.y<span class="number">-1</span>, t);</span><br><span class="line"><span class="keyword">if</span> (t.y + <span class="number">1</span>&gt;= <span class="number">0</span> &amp;&amp; maze[t.x][t.y+<span class="number">1</span>] != <span class="number">1</span> &amp;&amp; maze[t.x][t.y+<span class="number">1</span>] != <span class="number">2</span>)</span><br><span class="line">visit(t.x, t.y+<span class="number">1</span>, t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t.x == ep.x &amp;&amp; t.y == ep.y)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">displyMaze();</span><br><span class="line">Sleep(<span class="number">1000</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">displyMaze();</span><br><span class="line">Sleep(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;find path&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;find no path&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈实现深度搜索打印路径版"><a class="markdownIt-Anchor" href="#栈实现深度搜索打印路径版"></a> 栈实现深度搜索（打印路径版）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXROW 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLINE 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//1 代表墙，2 走过的路，0 代表路</span></span><br><span class="line"><span class="type">int</span> maze[MAXROW][MAXLINE] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">displyMaze</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MAXLINE; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (maze[i][j] == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%2s&quot;</span>, <span class="string">&quot; *&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (maze[i][j] == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%2s&quot;</span>, <span class="string">&quot; #&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%2s&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; ====================\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;point;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">point xis;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span> &#123;</span></span><br><span class="line">node* top;</span><br><span class="line">&#125;<span class="built_in">stack</span>;</span><br><span class="line"><span class="built_in">stack</span> s;</span><br><span class="line"><span class="type">void</span> <span class="title function_">initstack</span><span class="params">(<span class="built_in">stack</span>* s)</span></span><br><span class="line">&#123;</span><br><span class="line">s-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="built_in">stack</span>* s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>  s-&gt;top == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushstack</span><span class="params">(<span class="built_in">stack</span>* s, point a)</span></span><br><span class="line">&#123;</span><br><span class="line">node* t = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (t == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">t-&gt;xis = a;</span><br><span class="line">t-&gt;next = s-&gt;top;</span><br><span class="line">s-&gt;top = t;</span><br><span class="line">&#125;</span><br><span class="line">point <span class="title function_">popstack</span><span class="params">(<span class="built_in">stack</span>* s)</span></span><br><span class="line">&#123;</span><br><span class="line">node* t = s-&gt;top;</span><br><span class="line">s-&gt;top = s-&gt;top-&gt;next;</span><br><span class="line">point o = t-&gt;xis;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line">point prepoint[MAXROW][MAXLINE];</span><br><span class="line"><span class="type">void</span> <span class="title function_">visit</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,point p)</span></span><br><span class="line">&#123;</span><br><span class="line">point q = &#123; x,y &#125;;</span><br><span class="line">pushstack(&amp;s, q);</span><br><span class="line"></span><br><span class="line">prepoint[x][y] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">point sp = &#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">point ep = &#123;<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(prepoint, <span class="number">0xff</span>, <span class="keyword">sizeof</span>(prepoint));</span><br><span class="line">initstack(&amp;s);</span><br><span class="line">pushstack(&amp;s, sp);</span><br><span class="line"><span class="keyword">while</span> (!isempty(&amp;s))</span><br><span class="line">&#123;</span><br><span class="line">point t = popstack(&amp;s);</span><br><span class="line">maze[t.x][t.y] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (t.x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; maze[t.x - <span class="number">1</span>][t.y] != <span class="number">1</span> &amp;&amp; maze[t.x - <span class="number">1</span>][t.y] != <span class="number">2</span>)</span><br><span class="line">visit(t.x<span class="number">-1</span>, t.y,t);</span><br><span class="line"><span class="keyword">if</span> (t.x + <span class="number">1</span> &lt;=<span class="number">9</span> &amp;&amp; maze[t.x + <span class="number">1</span>][t.y] != <span class="number">1</span> &amp;&amp; maze[t.x + <span class="number">1</span>][t.y] != <span class="number">2</span>)</span><br><span class="line">visit(t.x + <span class="number">1</span>, t.y, t);</span><br><span class="line"><span class="keyword">if</span> (t.y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; maze[t.x][t.y<span class="number">-1</span>] != <span class="number">1</span> &amp;&amp; maze[t.x][t.y<span class="number">-1</span>] != <span class="number">2</span>)</span><br><span class="line">visit(t.x, t.y<span class="number">-1</span>, t);</span><br><span class="line"><span class="keyword">if</span> (t.y + <span class="number">1</span>&gt;= <span class="number">0</span> &amp;&amp; maze[t.x][t.y+<span class="number">1</span>] != <span class="number">1</span> &amp;&amp; maze[t.x][t.y+<span class="number">1</span>] != <span class="number">2</span>)</span><br><span class="line">visit(t.x, t.y+<span class="number">1</span>, t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t.x == ep.x &amp;&amp; t.y == ep.y)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">displyMaze();</span><br><span class="line">Sleep(<span class="number">500</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">displyMaze();</span><br><span class="line">Sleep(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;find path&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;find no path&quot;</span>);</span><br><span class="line"></span><br><span class="line">point s = ep;</span><br><span class="line"><span class="keyword">while</span> (s.y != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d ,%d )\n&quot;</span>,s.x,s.y);</span><br><span class="line">s = prepoint[s.x][s.y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;栈的基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#栈的基本概念&quot;&gt;&lt;/a&gt; 栈的基本概念&lt;/h2&gt;
&lt;p&gt;栈是一种只允许在一端进行插入或删除操作的线性表，栈是一种线性表，但限定这种线性表只能在某一段进行插入和删除操作&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C-linklist</title>
    <link href="http://example.com/2023/07/07/C-linklist/"/>
    <id>http://example.com/2023/07/07/C-linklist/</id>
    <published>2023-07-07T02:08:05.834Z</published>
    <updated>2023-07-08T03:14:14.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表的特点和作用"><a class="markdownIt-Anchor" href="#链表的特点和作用"></a> 链表的特点和作用</h2><p>链表的特点正如字面含义一样，链式结构，线性表，其特点决定链表的作用主要是更好利用磁盘碎片，避免malloc申请连续空间却因碎片过多而失败的问题，因为链表中的元素只需要知道直接前继和直接后续，同时只需要知道节点的起始地址，从而不需要顺序存储，这就很好地利用了磁盘碎片，同时链式结构也方便了对元素的增删改查</p><h2 id="链表的一些概念"><a class="markdownIt-Anchor" href="#链表的一些概念"></a> 链表的一些概念</h2><h3 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> 结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span>  <span class="title">node</span>&#123;</span></span><br><span class="line">   <span class="type">int</span>  data;</span><br><span class="line">   node*  next;</span><br><span class="line">&#125;node;</span><br></pre></td></tr></table></figure><h3 id="头指针"><a class="markdownIt-Anchor" href="#头指针"></a> 头指针</h3><p>指向头节点，记录头节点的起始地址</p><h3 id="头节点"><a class="markdownIt-Anchor" href="#头节点"></a> 头节点</h3><p>第一个节点，可以不存储任何数据</p><h3 id="尾节点"><a class="markdownIt-Anchor" href="#尾节点"></a> 尾节点</h3><p>最后一个节点，需要指向空指针</p><h3 id="空链表"><a class="markdownIt-Anchor" href="#空链表"></a> 空链表</h3><p>只有头节点和头指针，头节点与尾节点重合</p><h2 id="单向链表的两种创建方法"><a class="markdownIt-Anchor" href="#单向链表的两种创建方法"></a> 单向链表的两种创建方法</h2><h3 id="尾插法"><a class="markdownIt-Anchor" href="#尾插法"></a> 尾插法</h3><p>单向链表的第一种创建方法是尾插法，其本质是保证每次新创建的节点是尾节点，最终再将尾指针置空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">node*  <span class="title function_">createlist1</span><span class="params">(node* head)</span>&#123;</span><br><span class="line">    head=(node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    node*t=head;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    scanf_S(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="keyword">while</span>(a)&#123;</span><br><span class="line">        node* cur=(node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        cur-&gt;data=a;</span><br><span class="line">        t-&gt;next=cur;</span><br><span class="line">        t=cur;</span><br><span class="line">        scanf_S(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    &#125;</span><br><span class="line">    t-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="头插法"><a class="markdownIt-Anchor" href="#头插法"></a> 头插法</h3><p>单向链表的第二种创建方法是头插法，其要领是新进来的节点要有所指向，避免打断原有进程，这种思想在链表中应用非常广泛</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">node*  <span class="title function_">createlist2</span><span class="params">(node*  head)</span>&#123;</span><br><span class="line">    head=(node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        node* t=(node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        t-&gt;data=b;</span><br><span class="line">        t-&gt;next=head-&gt;next;</span><br><span class="line">        head-&gt;next=t;</span><br><span class="line">        scanf_S(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单向链表的简单操作"><a class="markdownIt-Anchor" href="#单向链表的简单操作"></a> 单向链表的简单操作</h2><h3 id="链表遍历"><a class="markdownIt-Anchor" href="#链表遍历"></a> 链表遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printlist</span><span class="params">(node* head)</span>&#123;</span><br><span class="line">   node* p=head;</span><br><span class="line">   p=p-&gt;next;</span><br><span class="line">   <span class="keyword">while</span>(p)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p-&gt;data);</span><br><span class="line">       p=p-&gt;next;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表求长"><a class="markdownIt-Anchor" href="#链表求长"></a> 链表求长</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>  <span class="title function_">lenlist</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(head)</span><br><span class="line">    &#123;</span><br><span class="line">        len++;</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表查找"><a class="markdownIt-Anchor" href="#链表查找"></a> 链表查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">node*  <span class="title function_">searchlist</span><span class="params">(node* head,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">    p=head;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data==c)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表插入"><a class="markdownIt-Anchor" href="#链表插入"></a> 链表插入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertlist</span><span class="params">(node* head,node* pfind,<span class="type">int</span> d)</span></span><br><span class="line">&#123;</span><br><span class="line">   head=head-&gt;next;</span><br><span class="line">   <span class="keyword">while</span>(head-&gt;next!=pfind)</span><br><span class="line">      head=head-&gt;next;</span><br><span class="line">   node* t=(node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">     <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    t-&gt;data=d;</span><br><span class="line">    t-&gt;next=head-&gt;next;</span><br><span class="line">    head-&gt;next=t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表删除简单版"><a class="markdownIt-Anchor" href="#链表删除简单版"></a> 链表删除（简单版）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">deletelist1</span><span class="params">(node* head,node* pfind)</span></span><br><span class="line">&#123;</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(head-&gt;next!=pfind)</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    head-&gt;next=head-&gt;next-&gt;next;</span><br><span class="line">    node* t=head-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表删除优化版"><a class="markdownIt-Anchor" href="#链表删除优化版"></a> 链表删除(优化版)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">deletelist2</span><span class="params">(node* head,node* pfind)</span></span><br><span class="line">&#123;</span><br><span class="line">    node *p=pfind-&gt;next;</span><br><span class="line">   <span class="keyword">if</span>(pfind-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(head-&gt;next!=pfind)</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">        head-&gt;next=head-&gt;next-&gt;next;</span><br><span class="line">        node* t=head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(t);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pfind-&gt;data=pfind-&gt;next-&gt;data;</span><br><span class="line">        pfind-&gt;next=pfind-&gt;next-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表排序数据域版"><a class="markdownIt-Anchor" href="#链表排序数据域版"></a> 链表排序(数据域版)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">popsort1</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len = lenlist(head);</span><br><span class="line">    head=head-&gt;next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        node* p=head;</span><br><span class="line">        node* q=p-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data &gt; q-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;data^=q-&gt;data;</span><br><span class="line">                q-&gt;data^=p-&gt;data;</span><br><span class="line">                p-&gt;data^=q-&gt;data;</span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            q=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表排序指针域版"><a class="markdownIt-Anchor" href="#链表排序指针域版"></a> 链表排序(指针域版)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">popsort2</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> len=lenlist(head);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        node*  prep=head;</span><br><span class="line">        node*  p=prep-&gt;next;</span><br><span class="line">        node*  q=p-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data &gt; q-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                prep-&gt;next=q;</span><br><span class="line">                p-&gt;next=q-&gt;next;</span><br><span class="line">                q-&gt;next=p;</span><br><span class="line">                </span><br><span class="line">                node*t=p;</span><br><span class="line">                p=q;</span><br><span class="line">                q=t;</span><br><span class="line">            &#125;</span><br><span class="line">            prep=prep-&gt;next;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表逆置割裂链表重置-模拟头插法"><a class="markdownIt-Anchor" href="#链表逆置割裂链表重置-模拟头插法"></a> 链表逆置(割裂链表重置、模拟头插法)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>  <span class="title function_">reverselist</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    node* cur=head-&gt;next;</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;<span class="comment">//空链表加一个不完全链表</span></span><br><span class="line">    <span class="keyword">while</span>(cur)</span><br><span class="line">    &#123;</span><br><span class="line">       node* t=cur;</span><br><span class="line">       cur=cur-&gt;next;</span><br><span class="line">        </span><br><span class="line">       t-&gt;next=head-&gt;next;</span><br><span class="line">       head-&gt;next=t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表销毁"><a class="markdownIt-Anchor" href="#链表销毁"></a> 链表销毁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>  <span class="title function_">destroylist</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(head)</span><br><span class="line">    &#123;</span><br><span class="line">        node* t=head;</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单向链表演示"><a class="markdownIt-Anchor" href="#单向链表演示"></a> 单向链表演示</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line">node* <span class="title function_">createlist1</span><span class="params">(node* head)</span> <span class="comment">//尾插法</span></span><br><span class="line">&#123;</span><br><span class="line">head = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">node* t = head;</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="keyword">while</span> (a) &#123;</span><br><span class="line">node*cur = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">cur-&gt;data = a;</span><br><span class="line">t-&gt;next = cur;</span><br><span class="line">t = cur;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">&#125;</span><br><span class="line">t-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">node* <span class="title function_">createlist2</span><span class="params">(node* head)</span> <span class="comment">//头插法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">head = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="keyword">while</span> (a) &#123;</span><br><span class="line">node* t = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span> (t == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">t-&gt;data = a;</span><br><span class="line">t-&gt;next = head-&gt;next;</span><br><span class="line">head -&gt; next=t;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">node* <span class="title function_">searchlist</span><span class="params">(node* head, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">node* p = head;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == b)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(node* head)</span> &#123;</span><br><span class="line">node* p = head;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertlist</span><span class="params">(node* head, node* pfind)</span></span><br><span class="line">&#123;</span><br><span class="line">node* p = head;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != pfind)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">node* t = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">t-&gt;data = <span class="number">100</span>;</span><br><span class="line">t-&gt;next = pfind;</span><br><span class="line">p-&gt;next = t;</span><br><span class="line"><span class="comment">/*return p;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">deletelist1</span><span class="params">(node* head, node* pfind)</span> &#123;</span><br><span class="line">node* p = head;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next!=pfind) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">node* t = p-&gt;next;</span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line"><span class="comment">/*p-&gt;next = NULL;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">deletelist2</span><span class="params">(node* head, node* pfind)</span> &#123;</span><br><span class="line">node* t = pfind-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (pfind-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">node* p = head;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != pfind) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">node* t = p-&gt;next;</span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pfind-&gt;data = pfind-&gt;next-&gt;data;</span><br><span class="line">pfind-&gt;next = pfind-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*p-&gt;next = NULL;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">lenlist</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">node* p = head;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">popsort1</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len = lenlist(head);</span><br><span class="line">head = head-&gt;next;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">node* p = head;</span><br><span class="line">node* q = p-&gt;next;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;data ^= q-&gt;data;</span><br><span class="line">q-&gt;data ^= p-&gt;data;</span><br><span class="line">p-&gt;data ^= q-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">popsort2</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*head = head-&gt;next;*/</span></span><br><span class="line"><span class="type">int</span> len = lenlist(head);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">node* prep = head;</span><br><span class="line">node* p = prep-&gt;next;</span><br><span class="line">node* q = p-&gt;next;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">prep-&gt;next = q;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next = p;</span><br><span class="line"></span><br><span class="line">node* t = p;</span><br><span class="line">p = q;</span><br><span class="line">q = t;</span><br><span class="line">&#125;</span><br><span class="line">prep = prep-&gt;next;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">reverselist</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">node*cur=head-&gt;next;</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (cur) &#123;</span><br><span class="line">node* t = cur;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line"></span><br><span class="line">t-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">node* head=<span class="literal">NULL</span>;</span><br><span class="line">node* pfind = <span class="literal">NULL</span>;</span><br><span class="line">head = createlist1(head);</span><br><span class="line"><span class="comment">//head = createlist2(head);</span></span><br><span class="line">print(head);</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">pfind=searchlist(head,b);</span><br><span class="line">print(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">insertlist(head, pfind);</span><br><span class="line">print(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">pfind = searchlist(head, c);</span><br><span class="line">deletelist1(head, pfind);</span><br><span class="line">print(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;d);</span><br><span class="line">pfind = searchlist(head, d);</span><br><span class="line">deletelist2(head, pfind);</span><br><span class="line">print(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">/*popsort1(head);</span></span><br><span class="line"><span class="comment">print(head);</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);*/</span></span><br><span class="line">popsort2(head);</span><br><span class="line">print(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">reverselist(head);</span><br><span class="line">print(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a class="markdownIt-Anchor" href="#双向链表"></a> 双向链表</h2><h3 id="结构体-2"><a class="markdownIt-Anchor" href="#结构体-2"></a> 结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span>  <span class="title">dnode</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dnode</span>* <span class="title">pre</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dnode</span>* <span class="title">next</span>;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">&#125;dnode;</span><br></pre></td></tr></table></figure><h3 id="双向链表的创建空链表"><a class="markdownIt-Anchor" href="#双向链表的创建空链表"></a> 双向链表的创建(空链表)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dnode*  <span class="title function_">createlist</span><span class="params">(dnode* head)</span></span><br><span class="line">&#123;</span><br><span class="line">     head=(dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">     <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    head-&gt;next=head-&gt;pre=head;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表的插入头插法"><a class="markdownIt-Anchor" href="#双向链表的插入头插法"></a> 双向链表的插入(头插法)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>  <span class="title function_">insertlist</span><span class="params">(dnode* head,<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">     dnode* cur=(dnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(dnode));</span><br><span class="line">     <span class="keyword">if</span>(cur==<span class="literal">NULL</span>)</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">     cur-&gt;data=a;</span><br><span class="line">     cur-&gt;next=head-&gt;next;</span><br><span class="line">     cur-&gt;pre=head;</span><br><span class="line">     head-&gt;next=cur;</span><br><span class="line">     cur-&gt;next-&gt;pre=cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表的遍历正序"><a class="markdownIt-Anchor" href="#双向链表的遍历正序"></a> 双向链表的遍历(正序)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>  <span class="title function_">printlist</span><span class="params">(dnode* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    dnode* t=head;</span><br><span class="line">    t=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(t!=head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d   &quot;</span>,t-&gt;data);</span><br><span class="line">        t=t-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表的遍历逆序"><a class="markdownIt-Anchor" href="#双向链表的遍历逆序"></a> 双向链表的遍历(逆序)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printflist2</span><span class="params">(dnode* head)</span></span><br><span class="line">&#123;</span><br><span class="line">dnode* t = head;</span><br><span class="line">t = t-&gt;pre;</span><br><span class="line"><span class="keyword">while</span> (t != head)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d   &quot;</span>, t-&gt;data);</span><br><span class="line">t = t-&gt;pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数"><a class="markdownIt-Anchor" href="#主函数"></a> 主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line">dnode* head=<span class="literal">NULL</span>;</span><br><span class="line">head=createlist(head);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">insertlist(head, rand() % <span class="number">100</span>);</span><br><span class="line">printlist1(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">printflist2(head);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表练习题"><a class="markdownIt-Anchor" href="#链表练习题"></a> 链表练习题</h2><h3 id="判断链表是否有环"><a class="markdownIt-Anchor" href="#判断链表是否有环"></a> 判断链表是否有环</h3><p>应用套圈原理，设置两个指针a和b，其初始位置相同，都指向头指针，让b指针的移动速度始终比a快一个节点，即b=a-&gt;next</p><p>当a与b再次相等时，说明链表有环，否则就没有</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node* fast=node* slow=head;</span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;slow!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(fast==slow)</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    slow=slow-&gt;next;</span><br><span class="line">    fast=slow-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="只用一重循环寻找链表中间节点"><a class="markdownIt-Anchor" href="#只用一重循环寻找链表中间节点"></a> 只用一重循环寻找链表中间节点</h3><p>设想这样一种情况，有两个圆，大圆的周长是小圆的周长的两倍，当大圆走完一圈时，小圆刚好走完一半，同理，可以设置两个指针，第二个指针的速度是第一个指针的两倍，当第二个指针到达尾节点时，第一个节点刚好到达中间节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Node *fast = first;</span><br><span class="line">Node *slow = first;</span><br><span class="line"><span class="keyword">while</span> (fast-&gt;next != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">   fast = fast-&gt;next-&gt;next;</span><br><span class="line">   slow = slow-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, slow-&gt;data);</span><br></pre></td></tr></table></figure><h3 id="约瑟夫环"><a class="markdownIt-Anchor" href="#约瑟夫环"></a> 约瑟夫环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">head</span>,*<span class="title">p</span>,*<span class="title">q</span>;</span>            <span class="comment">//head为链表头</span></span><br><span class="line">    <span class="type">int</span> n,i,k;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//输入n</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;input n and k:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"> </span><br><span class="line">       <span class="comment">//建立链表</span></span><br><span class="line">      head = p =(<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));           <span class="comment">//创建第一个结点， head 指向表头结点,p指向表尾结点</span></span><br><span class="line">      p-&gt;data=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>( i=<span class="number">2</span>;i&lt;=n;i++)&#123;                                             <span class="comment">//构建单循环链表</span></span><br><span class="line">          q = (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));            <span class="comment">//q为当前正在创建的的结点</span></span><br><span class="line">          q -&gt;data = i;</span><br><span class="line">          p -&gt;next = q;  p=q;                                        <span class="comment">//将q链入表尾</span></span><br><span class="line">      &#125;</span><br><span class="line">      p-&gt;next = head;                                                 <span class="comment">//头尾相连</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">//删除过程</span></span><br><span class="line">      q=head;                                                       <span class="comment">//head报数为1</span></span><br><span class="line">      <span class="keyword">while</span>(q-&gt;next != q)&#123;                                          <span class="comment">//表中元素多于一个</span></span><br><span class="line">          <span class="keyword">if</span>(k%<span class="number">2</span> !=<span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">for</span> ( i= <span class="number">0</span>; i &lt; k/<span class="number">2</span>; i++) &#123;</span><br><span class="line">                  p = q-&gt;next;</span><br><span class="line">                  q = p-&gt;next;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//删除q</span></span><br><span class="line">              p-&gt;next = q-&gt;next;                                 <span class="comment">//绕过结点q</span></span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,q-&gt;data);                         <span class="comment">//显示被删除的编</span></span><br><span class="line">              <span class="built_in">free</span>(q) ;                                        <span class="comment">//回收被删除的空间</span></span><br><span class="line">              q = p-&gt;next;                                     <span class="comment">//让q指向报1的结点</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(k%<span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k/<span class="number">2</span><span class="number">-1</span>;i++)&#123;</span><br><span class="line">                 p = q-&gt;next;</span><br><span class="line">                  q = p-&gt;next;</span><br><span class="line">              &#125;</span><br><span class="line">             p=q-&gt;next;</span><br><span class="line"> </span><br><span class="line">             <span class="comment">//删除p</span></span><br><span class="line">              q-&gt;next=p-&gt;next;                                      <span class="comment">//绕过结点q</span></span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,p-&gt;data);                           <span class="comment">//显示被删除的编</span></span><br><span class="line">              <span class="built_in">free</span>(p);                                           <span class="comment">//回收被删除的空间</span></span><br><span class="line">              q=q-&gt;next;                                        <span class="comment">//让q指向报1的结点</span></span><br><span class="line">          &#125;</span><br><span class="line"> </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//打印结果</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;最后剩下:%d\n&quot;</span>,q-&gt;data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链表的特点和作用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#链表的特点和作用&quot;&gt;&lt;/a&gt; 链表的特点和作用&lt;/h2&gt;
&lt;p&gt;链表的特点正如字面含义一样，链式结构，线性表，其特点决定链表的作用主要是更好利用磁盘碎片，避免malloc申</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git的常用命令</title>
    <link href="http://example.com/2023/06/24/Git/"/>
    <id>http://example.com/2023/06/24/Git/</id>
    <published>2023-06-24T13:01:28.731Z</published>
    <updated>2023-07-08T03:14:07.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建仓库"><a class="markdownIt-Anchor" href="#新建仓库"></a> 新建仓库</h2><p><img src="../img/%E7%A4%BA%E4%BE%8B1.jpg" alt="示例1" /></p><p>新建好了一个仓库，可以看到只有一个readme文件，下面就以此来演示操作</p><h2 id="git常用的代码拉取-修改-提交-推送命令"><a class="markdownIt-Anchor" href="#git常用的代码拉取-修改-提交-推送命令"></a> git常用的代码拉取-修改-提交-推送命令</h2><p>现在我们来演示一下git上的常用的代码<strong>拉取-修改-提交-推送</strong>操作</p><h3 id="拉取"><a class="markdownIt-Anchor" href="#拉取"></a> 拉取</h3><p>拉取操作的实现主要是通过<strong>git  clone</strong>来实现的，通过仓库提供的SSH链接将仓库拉取到本地，通过<strong>git  bash</strong>：</p><p><img src="..%5Cimg%5Cimage-20230624155527087.png" alt="image-20230624155527087" /></p><p>执行完会发现，当前位置会出现一个与仓库名同名的文件</p><p><img src="..%5Cimg%5Cimage-20230624160606570.png" alt="image-20230624160606570" /></p><h3 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h3><p>假如我们拉取仓库后发现并不符合我们预期，我们希望可以更改仓库，并将项目重新上传到github上，那么我们需要三步，现在是第一步</p><p>——修改，首先我们要在仓库中添加helloworld.c和helloworld.h文件：</p><p><img src="..%5Cimg%5Cimage-20230624161531284.png" alt="image-20230624161531284" /></p><p>然后执行<strong>git  add</strong>命令，将增加的文件添加到本地暂存区，git add命令将本地文件或者代码添加到本地暂存区，这之前建议先通过</p><p><strong>git  status</strong>来查看工作区状态：</p><p><img src="..%5Cimg%5C%E7%A4%BA%E4%BE%8B3.jpg" alt="示例3" /></p><h3 id="提交"><a class="markdownIt-Anchor" href="#提交"></a> 提交</h3><p>紧接着上一步git add，将文件和代码添加到本地暂存区后，需要再从本地暂存区提交到本地master上（这正是分布式的巧妙，每个机器都可以拥有自己的代码仓库，在拉取远程仓库的时候，电脑就自动创建了本地的分支master，通过<strong>git   commit</strong>将修改好的仓库提交到</p><p>本地master上：</p><p><img src="Git.assets/image-20230624161531284.png" alt="image-20230624161531284" /></p><p><strong>-m表示备注信息</strong></p><h3 id="推送"><a class="markdownIt-Anchor" href="#推送"></a> 推送</h3><p>仅仅修改本地仓库是不够的，因为本地仓库其他合作者是看不见的，所以我们需要将本地仓库推送到远程仓库托管系统（GitHub），</p><p>这一步是通过<strong>git  push</strong>命令来实现的：</p><p><img src="Git.assets/%E7%A4%BA%E4%BE%8B5.jpg" alt="示例5" /></p><h3 id="完成"><a class="markdownIt-Anchor" href="#完成"></a> 完成</h3><p><img src="Git.assets/image-20230624170622816.png" alt="image-20230624170622816" /></p><h3 id="查看修改日志"><a class="markdownIt-Anchor" href="#查看修改日志"></a> 查看修改日志</h3><p><img src="Git.assets/image-20230624170757686.png" alt="image-20230624170757686" /></p><h3 id="git-clone和git-pull的区别"><a class="markdownIt-Anchor" href="#git-clone和git-pull的区别"></a> git  clone和git  pull的区别</h3><p>**git  clone：**从无到有，从远程克隆一整个仓库到本地，包括代码更新与日志等</p><p>**git  pull：**仅将远程仓库更新的部分合并到本地，一般用于更新本地仓库时使用</p><p><img src="Git.assets/image-20230624173611236.png" alt="image-20230624173611236" /></p><h2 id="git各阶段代码修改回退撤销操作"><a class="markdownIt-Anchor" href="#git各阶段代码修改回退撤销操作"></a> git各阶段代码修改回退撤销操作</h2><h3 id="git-add之前撤回对工作区的修改"><a class="markdownIt-Anchor" href="#git-add之前撤回对工作区的修改"></a> git  add之前撤回对工作区的修改</h3><p><img src="Git.assets/image-20230624194119864.png" alt="image-20230624194119864" /></p><h3 id="git-add之后撤回对暂存区的修改"><a class="markdownIt-Anchor" href="#git-add之后撤回对暂存区的修改"></a> git  add之后撤回对暂存区的修改</h3><p><img src="Git.assets/image-20230624194913043.png" alt="image-20230624194913043" /></p><h3 id="git-commit之后撤回提交的修改"><a class="markdownIt-Anchor" href="#git-commit之后撤回提交的修改"></a> git  commit之后撤回提交的修改</h3><p><img src="Git.assets/image-20230624200651783.png" alt="image-20230624200651783" /></p><h3 id="撤回对远程仓库的修改"><a class="markdownIt-Anchor" href="#撤回对远程仓库的修改"></a> 撤回对远程仓库的修改</h3><p>通过git   pull将最新的代码拉取下来后，删除修改，再重新push上去</p><h2 id="本地分支管理"><a class="markdownIt-Anchor" href="#本地分支管理"></a> 本地分支管理</h2><p>假设我们想要修改代码，但是我们需要修改很多次，这时我们就可以创建一个新的分支，将代码修改好再合并分支即可</p><p><img src="Git.assets/image-20230624204324627.png" alt="image-20230624204324627" /></p><p><img src="Git.assets/image-20230624204357562.png" alt="image-20230624204357562" /></p><p><strong>注意，如果两条分支同时对一个文件进行修改就会引起合并冲突，这时可以通过git   diff来查看冲突，然后直接手动修改</strong></p><h2 id="远程分支管理"><a class="markdownIt-Anchor" href="#远程分支管理"></a> 远程分支管理</h2><p>在远程仓库中新开一条分支，用来存储新的项目</p><p><img src="Git.assets/image-20230624205530762.png" alt="image-20230624205530762" /></p><p>然后通过git  pull到本地进行修改，不过要注意每个本地分支追踪的远程分支不同</p><p><img src="Git.assets/image-20230624205821100.png" alt="image-20230624205821100" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;新建仓库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#新建仓库&quot;&gt;&lt;/a&gt; 新建仓库&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/%E7%A4%BA%E4%BE%8B1.jpg&quot; alt=&quot;示例1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;新建好了</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/06/23/hello-world/"/>
    <id>http://example.com/2023/06/23/hello-world/</id>
    <published>2023-06-23T05:55:37.581Z</published>
    <updated>2023-06-24T07:22:29.198Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
